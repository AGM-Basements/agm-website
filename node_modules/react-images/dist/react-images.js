(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('react-dom'), require('glam'), require('raf-schd'), require('react-view-pager'), require('react-transition-group'), require('react-full-screen'), require('react-scrolllock'), require('a11y-focus-store')) :
  typeof define === 'function' && define.amd ? define(['react', 'react-dom', 'glam', 'raf-schd', 'react-view-pager', 'react-transition-group', 'react-full-screen', 'react-scrolllock', 'a11y-focus-store'], factory) :
  (global = global || self, global.Images = factory(global.React, global.ReactDOM, global.glam, global.rafScheduler, global.PageView, global.Transition, global.Fullscreen, global.ScrollLock, global.focusStore));
}(this, (function (React, reactDom, glam, rafScheduler, reactViewPager, reactTransitionGroup, Fullscreen, ScrollLock, focusStore) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  glam = glam && glam.hasOwnProperty('default') ? glam['default'] : glam;
  rafScheduler = rafScheduler && rafScheduler.hasOwnProperty('default') ? rafScheduler['default'] : rafScheduler;
  Fullscreen = Fullscreen && Fullscreen.hasOwnProperty('default') ? Fullscreen['default'] : Fullscreen;
  ScrollLock = ScrollLock && ScrollLock.hasOwnProperty('default') ? ScrollLock['default'] : ScrollLock;
  focusStore = focusStore && focusStore.hasOwnProperty('default') ? focusStore['default'] : focusStore;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var Base = function Base(_ref) {
    var css = _ref.css,
        innerRef = _ref.innerRef,
        Tag = _ref.tag,
        props = _objectWithoutProperties(_ref, ["css", "innerRef", "tag"]);

    return glam(Tag, _extends({
      ref: innerRef,
      css: _objectSpread2({
        boxSizing: 'border-box'
      }, css)
    }, props));
  };
  var Button = function Button(props) {
    return glam(Base, _extends({
      tag: "button"
    }, props));
  };
  var Div = function Div(props) {
    return glam(Base, _extends({
      tag: "div"
    }, props));
  };
  var Img = function Img(props) {
    return glam(Base, _extends({
      tag: "img"
    }, props));
  };
  var Nav = function Nav(props) {
    return glam(Base, _extends({
      tag: "nav"
    }, props));
  };
  var Span = function Span(props) {
    return glam(Base, _extends({
      tag: "span"
    }, props));
  };

  // ==============================
  // Class Name Prefixer
  // ==============================

  var CLASS_PREFIX = 'react-images';
  /**
   String representation of component state for styling with class names.

   Expects an array of strings OR a string/object pair:
   - className(['comp', 'comp-arg', 'comp-arg-2'])
     @returns 'react-images__comp react-images__comp-arg react-images__comp-arg-2'
   - className('comp', { some: true, state: false })
     @returns 'react-images__comp react-images__comp--some'
  */

  function className(name, state) {
    var arr = Array.isArray(name) ? name : [name]; // loop through state object, remove falsey values and combine with name

    if (state && typeof name === 'string') {
      for (var _key in state) {
        if (state.hasOwnProperty(_key) && state[_key]) {
          arr.push("".concat(name, "--").concat(_key));
        }
      }
    } // prefix everything and return a string


    return arr.map(function (cn) {
      return "".concat(CLASS_PREFIX, "__").concat(cn);
    }).join(' ');
  } // ==============================
  // Touch Capability Detector
  // ==============================

  function isTouch() {
    try {
      document.createEvent('TouchEvent');
      return true;
    } catch (e) {
      return false;
    }
  }

  var containerCSS = function containerCSS(_ref) {
    var isFullscreen = _ref.isFullscreen;
    return {
      backgroundColor: isFullscreen ? 'black' : null,
      display: 'flex ',
      flexDirection: 'column',
      height: '100%'
    };
  };

  var Container = function Container(props) {
    var children = props.children,
        getStyles = props.getStyles,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal,
        innerProps = props.innerProps;
    return glam(Div, _extends({
      css: getStyles('container', props),
      className: className('container', {
        isFullscreen: isFullscreen,
        isModal: isModal
      })
    }, innerProps), children);
  };

  var smallDevice = '@media (max-width: 769px)';

  var footerCSS = function footerCSS(_ref) {
    var isModal = _ref.isModal,
        interactionIsIdle = _ref.interactionIsIdle;
    return _defineProperty({
      alignItems: 'top',
      bottom: isModal ? 0 : null,
      color: isModal ? 'rgba(255, 255, 255, 0.9)' : '#666',
      display: 'flex ',
      flex: '0 0 auto',
      fontSize: 13,
      justifyContent: 'space-between',
      left: isModal ? 0 : null,
      opacity: interactionIsIdle && isModal ? 0 : 1,
      padding: isModal ? '30px 20px 20px' : '10px 0',
      position: isModal ? 'absolute' : null,
      right: isModal ? 0 : null,
      transform: isModal ? "translateY(".concat(interactionIsIdle ? 10 : 0, "px)") : null,
      transition: 'opacity 300ms, transform 300ms',
      zIndex: isModal ? 1 : null
    }, smallDevice, {
      padding: isModal ? '20px 15px 15px' : '5px 0'
    });
  };

  var Footer = function Footer(props) {
    var components = props.components,
        getStyles = props.getStyles,
        innerProps = props.innerProps,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal;
    var style = isModal ? {
      background: 'linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.33))'
    } : null;
    var state = {
      isFullscreen: isFullscreen,
      isModal: isModal
    };
    var cn = {
      container: className('footer', state),
      caption: className('footer__caption', state),
      count: className('footer__count', state)
    };
    var css = {
      container: getStyles('footer', props),
      caption: getStyles('footerCaption', props),
      count: getStyles('footerCount', props)
    };
    var Caption = components.Caption,
        Count = components.Count;
    return glam(Div, _extends({
      css: css.container,
      className: cn.container // TODO glam prefixer fails on gradients
      // https://github.com/threepointone/glam/issues/35
      ,
      style: style
    }, innerProps), glam(Caption, props), glam(Count, props));
  }; // ==============================
  // Inner Elements
  // ==============================


  var footerCaptionCSS = function footerCaptionCSS() {
    return {};
  };
  var FooterCaption = function FooterCaption(props) {
    var currentView = props.currentView,
        getStyles = props.getStyles,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal;
    var caption = currentView.caption;
    var state = {
      isFullscreen: isFullscreen,
      isModal: isModal
    };
    return glam(Span, {
      css: getStyles('footerCaption', props),
      className: className('footer__caption', state)
    }, caption);
  };
  var footerCountCSS = function footerCountCSS() {
    return {
      flexShrink: 0,
      marginLeft: '1em'
    };
  };
  var FooterCount = function FooterCount(props) {
    var currentIndex = props.currentIndex,
        getStyles = props.getStyles,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal,
        views = props.views;
    var state = {
      isFullscreen: isFullscreen,
      isModal: isModal
    };
    var activeView = currentIndex + 1;
    var totalViews = views.length;
    if (!activeView || !totalViews) return null;
    return glam(Span, {
      css: getStyles('footerCount', props),
      className: className('footer__count', state)
    }, activeView, " of ", totalViews);
  };

  var Svg = function Svg(_ref) {
    var size = _ref.size,
        props = _objectWithoutProperties(_ref, ["size"]);

    return glam("svg", _extends({
      role: "presentation",
      viewBox: "0 0 24 24",
      css: {
        display: 'inline-block',
        fill: 'currentColor',
        height: size,
        stroke: 'currentColor',
        strokeWidth: 0,
        width: size
      }
    }, props));
  };

  var ChevronLeft = function ChevronLeft(_ref2) {
    var _ref2$size = _ref2.size,
        size = _ref2$size === void 0 ? 32 : _ref2$size,
        props = _objectWithoutProperties(_ref2, ["size"]);

    return glam(Svg, _extends({
      size: size
    }, props), glam("path", {
      d: "M15.422 16.078l-1.406 1.406-6-6 6-6 1.406 1.406-4.594 4.594z"
    }));
  };
  var ChevronRight = function ChevronRight(_ref3) {
    var _ref3$size = _ref3.size,
        size = _ref3$size === void 0 ? 32 : _ref3$size,
        props = _objectWithoutProperties(_ref3, ["size"]);

    return glam(Svg, _extends({
      size: size
    }, props), glam("path", {
      d: "M9.984 6l6 6-6 6-1.406-1.406 4.594-4.594-4.594-4.594z"
    }));
  };
  var Close = function Close(_ref4) {
    var _ref4$size = _ref4.size,
        size = _ref4$size === void 0 ? 32 : _ref4$size,
        props = _objectWithoutProperties(_ref4, ["size"]);

    return glam(Svg, _extends({
      size: size
    }, props), glam("path", {
      d: "M18.984 6.422l-5.578 5.578 5.578 5.578-1.406 1.406-5.578-5.578-5.578 5.578-1.406-1.406 5.578-5.578-5.578-5.578 1.406-1.406 5.578 5.578 5.578-5.578z"
    }));
  };
  var FullscreenEnter = function FullscreenEnter(_ref5) {
    var _ref5$size = _ref5.size,
        size = _ref5$size === void 0 ? 32 : _ref5$size,
        props = _objectWithoutProperties(_ref5, ["size"]);

    return glam(Svg, _extends({
      size: size
    }, props), glam("path", {
      d: "M14.016 5.016h4.969v4.969h-1.969v-3h-3v-1.969zM17.016 17.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 9.984v-4.969h4.969v1.969h-3v3h-1.969zM6.984 14.016v3h3v1.969h-4.969v-4.969h1.969z"
    }));
  };
  var FullscreenExit = function FullscreenExit(_ref6) {
    var _ref6$size = _ref6.size,
        size = _ref6$size === void 0 ? 32 : _ref6$size,
        props = _objectWithoutProperties(_ref6, ["size"]);

    return glam(Svg, _extends({
      size: size
    }, props), glam("path", {
      d: "M15.984 8.016h3v1.969h-4.969v-4.969h1.969v3zM14.016 18.984v-4.969h4.969v1.969h-3v3h-1.969zM8.016 8.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 15.984v-1.969h4.969v4.969h-1.969v-3h-3z"
    }));
  };

  var headerCSS = function headerCSS(_ref) {
    var interactionIsIdle = _ref.interactionIsIdle;
    return {
      alignItems: 'center',
      display: 'flex ',
      flex: '0 0 auto',
      justifyContent: 'space-between',
      opacity: interactionIsIdle ? 0 : 1,
      padding: 10,
      paddingBottom: 20,
      position: 'absolute',
      transform: "translateY(".concat(interactionIsIdle ? -10 : 0, "px)"),
      transition: 'opacity 300ms, transform 300ms',
      top: 0,
      left: 0,
      right: 0,
      zIndex: 1
    };
  };

  var Header = function Header(props) {
    var components = props.components,
        getStyles = props.getStyles,
        getCloseLabel = props.getCloseLabel,
        getFullscreenLabel = props.getFullscreenLabel,
        innerProps = props.innerProps,
        isModal = props.isModal,
        modalProps = props.modalProps;
    if (!isModal) return null;
    var allowFullscreen = modalProps.allowFullscreen,
        isFullscreen = modalProps.isFullscreen,
        onClose = modalProps.onClose,
        toggleFullscreen = modalProps.toggleFullscreen;
    var FsIcon = isFullscreen ? FullscreenExit : FullscreenEnter;
    var CloseButton = components.CloseButton,
        FullscreenButton = components.FullscreenButton;
    var state = {
      isFullscreen: isFullscreen,
      isModal: isModal
    };
    return glam(Div, _extends({
      css: getStyles('header', props),
      className: className('header', state) // TODO glam prefixer fails on gradients
      // https://github.com/threepointone/glam/issues/35
      ,
      style: {
        background: 'linear-gradient(rgba(0,0,0,0.33), rgba(0,0,0,0))'
      }
    }, innerProps), glam("span", null), glam("span", null, allowFullscreen ? glam(FullscreenButton, {
      getStyles: getStyles,
      innerProps: {
        onClick: toggleFullscreen,
        title: getFullscreenLabel(state)
      }
    }, glam(FsIcon, {
      size: 32
    })) : null, glam(CloseButton, {
      getStyles: getStyles,
      innerProps: {
        onClick: onClose,
        title: getCloseLabel(state)
      }
    }, glam(Close, {
      size: 32
    }))));
  }; // ==============================
  // Header Buttons
  // ==============================


  var headerButtonCSS = function headerButtonCSS() {
    return {
      alignItems: 'center',
      background: 0,
      border: 0,
      color: 'rgba(255, 255, 255, 0.75)',
      cursor: 'pointer',
      display: 'inline-flex ',
      height: 44,
      justifyContent: 'center',
      outline: 0,
      padding: 0,
      position: 'relative',
      width: 44,
      '&:hover': {
        color: 'white'
      }
    };
  };
  var headerFullscreenCSS = headerButtonCSS;
  var HeaderFullscreen = function HeaderFullscreen(props) {
    var children = props.children,
        getStyles = props.getStyles,
        innerProps = props.innerProps;
    return glam(Button, _extends({
      css: getStyles('headerFullscreen', props),
      className: className(['header_button', 'header_button--fullscreen']),
      type: "button"
    }, innerProps), children);
  };
  var headerCloseCSS = headerButtonCSS;
  var HeaderClose = function HeaderClose(props) {
    var children = props.children,
        getStyles = props.getStyles,
        innerProps = props.innerProps;
    return glam(Button, _extends({
      css: getStyles('headerClose', props),
      className: className(['header_button', 'header_button--close']),
      type: "button"
    }, innerProps), children);
  };

  // Navigation
  // ==============================

  var navigationCSS = function navigationCSS(_ref) {
    var interactionIsIdle = _ref.interactionIsIdle;
    return {
      display: 'flex ',
      alignItems: 'center',
      justifyContent: 'space-between',
      opacity: interactionIsIdle ? 0 : 1,
      transition: 'opacity 300ms'
    };
  };
  var Navigation = function Navigation(props) {
    var children = props.children,
        getStyles = props.getStyles,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal;
    return !isTouch() ? glam(Nav, {
      css: getStyles('navigation', props),
      className: className('navigation', {
        isFullscreen: isFullscreen,
        isModal: isModal
      })
    }, children) : null;
  }; // ==============================
  // Nav Item
  // ==============================

  var BUTTON_SIZE = 50;
  var navigationItemCSS = function navigationItemCSS(_ref2) {
    var _ref3;

    var align = _ref2.align;
    return _ref3 = {
      alignItems: 'center',
      background: 'rgba(255, 255, 255, 0.2)',
      border: 0,
      borderRadius: '50%',
      color: 'white',
      cursor: 'pointer',
      display: 'flex ',
      fontSize: 'inherit',
      height: BUTTON_SIZE,
      justifyContent: 'center',
      marginTop: -(BUTTON_SIZE / 2),
      outline: 0,
      position: 'absolute',
      top: '50%',
      transition: 'background-color 200ms',
      width: BUTTON_SIZE
    }, _defineProperty(_ref3, align, 20), _defineProperty(_ref3, '&:hover', {
      background: 'rgba(255, 255, 255, 0.3)'
    }), _defineProperty(_ref3, '&:active', {
      background: 'rgba(255, 255, 255, 0.2)'
    }), _ref3;
  };
  var navigationPrevCSS = navigationItemCSS;
  var NavigationPrev = function NavigationPrev(props) {
    var _props$children = props.children,
        children = _props$children === void 0 ? glam(ChevronLeft, {
      size: 48
    }) : _props$children,
        getStyles = props.getStyles,
        innerProps = props.innerProps;
    return glam(Button, _extends({
      type: "button",
      css: getStyles('navigationPrev', props)
    }, innerProps), children);
  };
  var navigationNextCSS = navigationItemCSS;
  var NavigationNext = function NavigationNext(props) {
    var _props$children2 = props.children,
        children = _props$children2 === void 0 ? glam(ChevronRight, {
      size: 48
    }) : _props$children2,
        getStyles = props.getStyles,
        innerProps = props.innerProps;
    return glam(Button, _extends({
      type: "button",
      css: getStyles('navigationNext', props)
    }, innerProps), children);
  };

  // Blanket
  // ==============================

  var blanketCSS = function blanketCSS(_ref) {
    var isFullscreen = _ref.isFullscreen;
    return {
      backgroundColor: isFullscreen ? 'black' : 'rgba(0, 0, 0, 0.8)',
      bottom: 0,
      left: 0,
      position: 'fixed',
      right: 0,
      top: 0,
      zIndex: 1
    };
  };
  var Blanket = function Blanket(props) {
    var getStyles = props.getStyles,
        innerProps = props.innerProps,
        isFullscreen = props.isFullscreen;
    return glam(Div, _extends({
      css: getStyles('blanket', props),
      className: className('blanket', {
        isFullscreen: isFullscreen
      })
    }, innerProps));
  }; // ==============================
  // Positioner
  // ==============================

  var positionerCSS = function positionerCSS() {
    return {
      alignItems: 'center',
      bottom: 0,
      display: 'flex ',
      justifyContent: 'center',
      left: 0,
      position: 'fixed',
      right: 0,
      top: 0,
      zIndex: 1
    };
  };
  var Positioner = function Positioner(props) {
    var children = props.children,
        getStyles = props.getStyles,
        innerProps = props.innerProps,
        isFullscreen = props.isFullscreen;
    return glam(Div, _extends({
      css: getStyles('positioner', props),
      className: className('positioner', {
        isFullscreen: isFullscreen
      })
    }, innerProps), children);
  }; // ==============================
  // Dialog
  // ==============================

  var dialogCSS = function dialogCSS() {
    return {
      width: '100%'
    };
  };
  var Dialog = function Dialog(props) {
    var children = props.children,
        getStyles = props.getStyles,
        innerProps = props.innerProps,
        isFullscreen = props.isFullscreen;
    return glam(Div, _extends({
      css: getStyles('dialog', props),
      className: className('dialog', {
        isFullscreen: isFullscreen
      })
    }, innerProps), children);
  };

  function getSource(_ref) {
    var data = _ref.data,
        isFullscreen = _ref.isFullscreen;
    var _data$source = data.source,
        source = _data$source === void 0 ? data.src : _data$source;
    if (typeof source === 'string') return source;
    return isFullscreen ? source.fullscreen : source.regular;
  }

  var viewCSS = function viewCSS() {
    return {
      lineHeight: 0,
      position: 'relative',
      textAlign: 'center'
    };
  };

  var View = function View(props) {
    var data = props.data,
        formatters = props.formatters,
        getStyles = props.getStyles,
        index = props.index,
        isFullscreen = props.isFullscreen,
        isModal = props.isModal;
    var innerProps = {
      alt: formatters.getAltText({
        data: data,
        index: index
      }),
      src: getSource({
        data: data,
        isFullscreen: isFullscreen
      })
    };
    return glam(Div, {
      css: getStyles('view', props),
      className: className('view', {
        isFullscreen: isFullscreen,
        isModal: isModal
      })
    }, glam(Img, _extends({}, innerProps, {
      className: className('view-image', {
        isFullscreen: isFullscreen,
        isModal: isModal
      }),
      css: {
        height: 'auto',
        maxHeight: '100vh',
        maxWidth: '100vw',
        userSelect: 'none'
      }
    })));
  };

  var carouselComponents = {
    Container: Container,
    Footer: Footer,
    FooterCaption: FooterCaption,
    FooterCount: FooterCount,
    Header: Header,
    HeaderClose: HeaderClose,
    HeaderFullscreen: HeaderFullscreen,
    Navigation: Navigation,
    NavigationPrev: NavigationPrev,
    NavigationNext: NavigationNext,
    View: View
  };
  var defaultCarouselComponents = function defaultCarouselComponents(providedComponents) {
    return _objectSpread2({}, carouselComponents, {}, providedComponents);
  }; // ==============================
  // Modal
  // ==============================

  var modalComponents = {
    Blanket: Blanket,
    Positioner: Positioner,
    Dialog: Dialog
  };
  var defaultModalComponents = function defaultModalComponents(providedComponents) {
    return _objectSpread2({}, modalComponents, {}, providedComponents);
  };

  var defaultCarouselStyles = {
    container: containerCSS,
    footer: footerCSS,
    footerCaption: footerCaptionCSS,
    footerCount: footerCountCSS,
    header: headerCSS,
    headerClose: headerCloseCSS,
    headerFullscreen: headerFullscreenCSS,
    navigation: navigationCSS,
    navigationPrev: navigationPrevCSS,
    navigationNext: navigationNextCSS,
    view: viewCSS
  };
  var defaultModalStyles = {
    blanket: blanketCSS,
    dialog: dialogCSS,
    positioner: positionerCSS
  }; // Merge Utility

  // NOTE: props aren't used by default for some getters but consumers may need
  // them, this needs to be reflected in the flow type.

  /* eslint-disable no-unused-vars */
  // ==============================
  // Navigation
  // ==============================

  /* ARIA label for the next button */
  function getNextLabel(_ref) {
    var currentIndex = _ref.currentIndex,
        views = _ref.views;
    return "Show slide ".concat(currentIndex + 2, " of ").concat(views.length);
  }
  /* ARIA label for the previous button */


  function getPrevLabel(_ref2) {
    var currentIndex = _ref2.currentIndex,
        views = _ref2.views;
    return "Show slide ".concat(currentIndex, " of ").concat(views.length);
  }
  /* HTML title for the next button */


  function getNextTitle(props) {
    return 'Next (right arrow)';
  }
  /* HTML title for the previous button */


  function getPrevTitle(props) {
    return 'Previous (left arrow)';
  } // ==============================
  // Header
  // ==============================


  /* ARIA label for the close button */
  function getCloseLabel(props) {
    return 'Close (esc)';
  }
  /* ARIA label for the fullscreen button */


  function getFullscreenLabel(_ref3) {
    var isFullscreen = _ref3.isFullscreen;
    return isFullscreen ? 'Exit fullscreen (f)' : 'Enter fullscreen (f)';
  } // ==============================
  // View
  // ==============================

  /* alt text for each image in the carousel */


  function getAltText(_ref4) {
    var data = _ref4.data,
        index = _ref4.index;
    if (data.caption) return data.caption;
    return "Image ".concat(index + 1);
  } // ==============================
  // Exports
  // ==============================


  var formatters = {
    getAltText: getAltText,
    getNextLabel: getNextLabel,
    getPrevLabel: getPrevLabel,
    getNextTitle: getNextTitle,
    getPrevTitle: getPrevTitle,
    getCloseLabel: getCloseLabel,
    getFullscreenLabel: getFullscreenLabel
  };

  var viewPagerStyles = {
    flex: '1 1 auto',
    position: 'relative'
  };
  var frameStyles = {
    outline: 0
  };
  var defaultProps = {
    currentIndex: 0,
    formatters: formatters,
    hideControlsWhenIdle: 3000,
    styles: {},
    trackProps: {
      instant: !isTouch(),
      swipe: 'touch'
    }
  };

  var Carousel =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Carousel, _Component);

    // TODO
    function Carousel(props) {
      var _this;

      _classCallCheck(this, Carousel);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Carousel).call(this, props));

      _initialiseProps.call(_assertThisInitialized(_this));

      _this.cacheComponents(props.components);

      _this.state = {
        currentIndex: props.currentIndex,
        interactionIsIdle: isTouch()
      };
      return _this;
    }

    _createClass(Carousel, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            hideControlsWhenIdle = _this$props.hideControlsWhenIdle,
            modalProps = _this$props.modalProps;
        var isModal = Boolean(modalProps);
        this.mounted = true;

        if (hideControlsWhenIdle && this.container) {
          this.container.addEventListener('mousedown', this.handleMouseActivity);
          this.container.addEventListener('mousemove', this.handleMouseActivity);
          this.container.addEventListener('touchmove', this.handleMouseActivity);
        }

        if (isModal) {
          this.focusViewFrame();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.components !== this.props.components) {
          this.cacheComponents(prevProps.components);
        }

        if (this.props.currentIndex !== prevProps.currentIndex) {
          this.setState({
            currentIndex: prevProps.currentIndex
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;

        if (this.props.hideControlsWhenIdle && this.container) {
          this.container.removeEventListener('mousedown', this.handleMouseActivity);
          this.container.removeEventListener('mousemove', this.handleMouseActivity);
          this.container.removeEventListener('touchmove', this.handleMouseActivity);
          this.handleMouseActivity.cancel();
        }
      }
    }, {
      key: "getCommonProps",
      value: function getCommonProps() {
        var _this$props2 = this.props,
            frameProps = _this$props2.frameProps,
            trackProps = _this$props2.trackProps,
            modalProps = _this$props2.modalProps,
            views = _this$props2.views;
        var isModal = Boolean(modalProps);
        var isFullscreen = Boolean(modalProps && modalProps.isFullscreen);
        var _this$state = this.state,
            currentIndex = _this$state.currentIndex,
            interactionIsIdle = _this$state.interactionIsIdle;
        var currentView = this.getViewData();
        return {
          carouselProps: this.props,
          currentIndex: currentIndex,
          currentView: currentView,
          formatters: this.props.formatters,
          frameProps: frameProps,
          getStyles: this.getStyles,
          isFullscreen: isFullscreen,
          isModal: isModal,
          modalProps: modalProps,
          interactionIsIdle: interactionIsIdle,
          trackProps: trackProps,
          views: views
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$components = this.components,
            Container = _this$components.Container,
            View = _this$components.View;
        var currentIndex = this.state.currentIndex;
        var _this$props3 = this.props,
            frameProps = _this$props3.frameProps,
            views = _this$props3.views;
        var commonProps = this.commonProps = this.getCommonProps();
        return glam(Container, _extends({}, commonProps, {
          innerProps: {
            innerRef: this.getContainer
          }
        }), this.renderHeader(), glam(reactViewPager.ViewPager, {
          tag: "main",
          style: viewPagerStyles,
          className: className('pager')
        }, glam(reactViewPager.Frame, _extends({}, frameProps, {
          ref: this.getFrame,
          className: className('frame'),
          style: frameStyles
        }), glam(reactViewPager.Track, _extends({}, this.getTrackProps(this.props), {
          style: {
            display: 'flex',
            alignItems: 'center'
          },
          currentView: currentIndex,
          className: className('track'),
          onViewChange: this.handleViewChange,
          ref: this.getTrack
        }), views && views.map(function (data, index) {
          return glam(reactViewPager.View, {
            className: className('view-wrapper'),
            key: index
          }, glam(View, _extends({}, commonProps, {
            data: data,
            index: index
          })));
        }))), this.renderNavigation()), this.renderFooter());
      }
    }]);

    return Carousel;
  }(React.Component);

  Carousel.defaultProps = defaultProps;

  var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.mounted = false;

    this.cacheComponents = function (comps) {
      _this2.components = defaultCarouselComponents(comps);
    };

    this.getContainer = function (ref) {
      _this2.container = ref;
    };

    this.getFooter = function (ref) {
      _this2.footer = ref;
    };

    this.getFrame = function (ref) {
      _this2.frame = reactDom.findDOMNode(ref);
    };

    this.getHeader = function (ref) {
      _this2.header = ref;
    };

    this.getTrack = function (ref) {
      _this2.track = ref;
    };

    this.hasPreviousView = function () {
      var trackProps = _this2.props.trackProps;
      var currentIndex = _this2.state.currentIndex;
      return trackProps.infinite || currentIndex !== 0;
    };

    this.hasNextView = function () {
      var _this2$props = _this2.props,
          trackProps = _this2$props.trackProps,
          views = _this2$props.views;
      var currentIndex = _this2.state.currentIndex;
      return trackProps.infinite || currentIndex !== views.length - 1;
    };

    this.getStyles = function (key, props) {
      var base = defaultCarouselStyles[key](props);
      base.boxSizing = 'border-box';
      var custom = _this2.props.styles[key];
      return custom ? custom(base, props) : base;
    };

    this.getTrackProps = function (props) {
      return _objectSpread2({}, defaultProps.trackProps, {}, props.trackProps);
    };

    this.getFormatters = function () {
      return _objectSpread2({}, defaultProps.formatters, {}, _this2.props.formatters);
    };

    this.getViewData = function () {
      var views = _this2.props.views;
      var currentIndex = _this2.state.currentIndex;
      return views[currentIndex];
    };

    this.focusViewFrame = function () {
      if (_this2.frame && document.activeElement !== _this2.frame) {
        _this2.frame.focus();
      }
    };

    this.prev = function () {
      _this2.track.prev();

      _this2.focusViewFrame();
    };

    this.next = function () {
      _this2.track.next();

      _this2.focusViewFrame();
    };

    this.handleMouseActivity = rafScheduler(function () {
      clearTimeout(_this2.timer);

      if (_this2.state.interactionIsIdle) {
        _this2.setState({
          interactionIsIdle: false
        });
      }

      _this2.timer = setTimeout(function () {
        if (_this2.mounted) {
          _this2.setState({
            interactionIsIdle: true
          });
        }
      }, _this2.props.hideControlsWhenIdle);
    });

    this.handleViewChange = function (indicies) {
      var trackProps = _this2.props.trackProps; // simplify by enforcing number

      var currentIndex = indicies[0];

      _this2.setState({
        currentIndex: currentIndex
      }); // call the consumer's onViewChange fn


      if (trackProps && trackProps.onViewChange) {
        trackProps.onViewChange(currentIndex);
      }
    };

    this.renderNavigation = function () {
      var _this2$getFormatters = _this2.getFormatters(),
          getNextLabel = _this2$getFormatters.getNextLabel,
          getPrevLabel = _this2$getFormatters.getPrevLabel,
          getNextTitle = _this2$getFormatters.getNextTitle,
          getPrevTitle = _this2$getFormatters.getPrevTitle;

      var _this2$components = _this2.components,
          Navigation = _this2$components.Navigation,
          NavigationPrev = _this2$components.NavigationPrev,
          NavigationNext = _this2$components.NavigationNext;
      var commonProps = _this2.commonProps;

      var showPrev = _this2.hasPreviousView();

      var showNext = _this2.hasNextView();

      var showNav = (showPrev || showNext) && Navigation;
      return showNav ? glam(Navigation, commonProps, showPrev && glam(NavigationPrev, _extends({}, commonProps, {
        align: "left",
        innerProps: {
          'aria-label': getPrevLabel(commonProps),
          onClick: _this2.prev,
          title: getPrevTitle(commonProps)
        }
      })), showNext && glam(NavigationNext, _extends({}, commonProps, {
        align: "right",
        innerProps: {
          'aria-label': getNextLabel(commonProps),
          onClick: _this2.next,
          title: getNextTitle(commonProps)
        }
      }))) : null;
    };

    this.renderFooter = function () {
      var _this2$components2 = _this2.components,
          Footer = _this2$components2.Footer,
          FooterCaption = _this2$components2.FooterCaption,
          FooterCount = _this2$components2.FooterCount;
      var commonProps = _this2.commonProps;
      return Footer ? glam(Footer, _extends({}, commonProps, {
        components: {
          Caption: FooterCaption,
          Count: FooterCount
        },
        innerProps: {
          innerRef: _this2.getFooter
        }
      })) : null;
    };

    this.renderHeader = function () {
      var _this2$components3 = _this2.components,
          Header = _this2$components3.Header,
          HeaderClose = _this2$components3.HeaderClose,
          HeaderFullscreen = _this2$components3.HeaderFullscreen;

      var _this2$getFormatters2 = _this2.getFormatters(),
          getCloseLabel = _this2$getFormatters2.getCloseLabel,
          getFullscreenLabel = _this2$getFormatters2.getFullscreenLabel;

      var commonProps = _this2.commonProps;
      return Header ? glam(Header, _extends({}, commonProps, {
        getCloseLabel: getCloseLabel,
        getFullscreenLabel: getFullscreenLabel,
        components: {
          CloseButton: HeaderClose,
          FullscreenButton: HeaderFullscreen
        },
        data: _this2.getViewData(),
        innerProps: {
          innerRef: _this2.getHeader
        }
      })) : null;
    };
  };

  var FirstChild = function FirstChild(_ref) {
    var children = _ref.children;
    return React.Children.toArray(children)[0] || null;
  };

  var ModalGateway =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ModalGateway, _Component);

    function ModalGateway() {
      _classCallCheck(this, ModalGateway);

      return _possibleConstructorReturn(this, _getPrototypeOf(ModalGateway).apply(this, arguments));
    }

    _createClass(ModalGateway, [{
      key: "render",
      value: function render() {
        if (typeof window === 'undefined') return null;
        var _this$props = this.props,
            target = _this$props.target,
            children = _this$props.children;
        return reactDom.createPortal(React__default.createElement(reactTransitionGroup.TransitionGroup, {
          component: FirstChild,
          children: children
        }), target);
      }
    }]);

    return ModalGateway;
  }(React.Component);

  ModalGateway.defaultProps = {
    target: typeof window !== 'undefined' ? document.body : null
  };

  var easing = 'cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint

  var verticalOffset = 40;
  // ==============================
  // Fade
  // ==============================
  var Fade = function Fade(_ref) {
    var Tag = _ref.component,
        onEntered = _ref.onEntered,
        onExited = _ref.onExited,
        inProp = _ref["in"],
        originalProps = _ref.innerProps,
        props = _objectWithoutProperties(_ref, ["component", "onEntered", "onExited", "in", "innerProps"]);

    var enter = 300;
    var exit = 500;
    var fadeStyle = {
      transition: 'opacity 200ms',
      opacity: 0
    };
    var fadeTransition = {
      entering: {
        opacity: 0
      },
      entered: {
        opacity: 1
      },
      exiting: {
        opacity: 0,
        transitionDuration: "".concat(exit, "ms")
      }
    };
    return React__default.createElement(reactTransitionGroup.Transition, {
      appear: true,
      mountOnEnter: true,
      unmountOnExit: true,
      onEntered: onEntered,
      onExited: onExited,
      key: "fade",
      "in": inProp,
      timeout: {
        enter: enter,
        exit: exit
      }
    }, function (status) {
      var innerProps = _objectSpread2({}, originalProps, {
        style: _objectSpread2({}, fadeStyle, {}, fadeTransition[status])
      });

      if (status === 'exited') return null;
      return React__default.createElement(Tag, _extends({
        innerProps: innerProps
      }, props));
    });
  }; // ==============================
  // Slide Up
  // ==============================

  var SlideUp = function SlideUp(_ref2) {
    var Tag = _ref2.component,
        onEntered = _ref2.onEntered,
        onExited = _ref2.onExited,
        inProp = _ref2["in"],
        originalProps = _ref2.innerProps,
        props = _objectWithoutProperties(_ref2, ["component", "onEntered", "onExited", "in", "innerProps"]);

    var enter = 300;
    var exit = 500;
    var restingTransform = 'translate3d(0, 0, 0)';
    var slideStyle = {
      transition: "transform ".concat(enter, "ms ").concat(easing, ", opacity ").concat(enter, "ms ").concat(easing),
      transform: restingTransform
    };
    var slideTransition = {
      entering: {
        opacity: 0,
        transform: "translate3d(0, ".concat(verticalOffset, "px, 0) scale(0.9)")
      },
      entered: {
        opacity: 1,
        transform: restingTransform
      },
      exiting: {
        opacity: 0,
        transform: "translate3d(0, ".concat(verticalOffset, "px, 0) scale(0.9)"),
        transition: "transform ".concat(exit, "ms ").concat(easing, ", opacity ").concat(exit, "ms ").concat(easing)
      }
    };
    return React__default.createElement(reactTransitionGroup.Transition, {
      appear: true,
      "in": inProp,
      mountOnEnter: true,
      onEntered: onEntered,
      onExited: onExited,
      timeout: {
        enter: enter,
        exit: exit
      },
      unmountOnExit: true
    }, function (status) {
      if (status === 'exited') return null;

      var innerProps = _objectSpread2({}, originalProps, {
        style: _objectSpread2({}, slideStyle, {}, slideTransition[status])
      });

      return React__default.createElement(Tag, _extends({
        innerProps: innerProps
      }, props));
    });
  };

  var defaultProps$1 = {
    allowFullscreen: !isTouch(),
    closeOnBackdropClick: true,
    closeOnEsc: true,
    styles: {}
  };

  var Modal =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Modal, _Component);

    // TODO
    function Modal(props) {
      var _this;

      _classCallCheck(this, Modal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

      _initialiseProps$1.call(_assertThisInitialized(_this));

      _this.cacheComponents(props.components);

      _this.state = {
        isFullscreen: false
      };
      return _this;
    }

    _createClass(Modal, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.components !== this.props.components) {
          this.cacheComponents(prevProps.components);
        }
      } // emulate `componentDidMount` & `componentWillUnmount`
      // called on complete of enter & exit transitions respectively

    }, {
      key: "getCommonProps",
      value: function getCommonProps() {
        var isFullscreen = this.state.isFullscreen;
        return {
          getStyles: this.getStyles,
          isFullscreen: isFullscreen,
          modalProps: this.props
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$components = this.components,
            Blanket = _this$components.Blanket,
            Positioner = _this$components.Positioner,
            Dialog = _this$components.Dialog;
        var _this$props = this.props,
            allowFullscreen = _this$props.allowFullscreen,
            children = _this$props.children;
        var isFullscreen = this.state.isFullscreen;
        var commonProps = this.commonProps = this.getCommonProps(); // $FlowFixMe

        var transitionIn = this.props["in"]; // forward props to modal for use in internal components

        var modalProps = {
          allowFullscreen: allowFullscreen,
          isFullscreen: isFullscreen,
          onClose: this.handleClose,
          toggleFullscreen: this.toggleFullscreen
        }; // augment user carousel with modal props
        // $FlowFixMe

        var carouselComponent = React.cloneElement(children, {
          isModal: true,
          modalProps: modalProps
        });
        return glam(Fullscreen, {
          enabled: isFullscreen,
          onChange: this.handleFullscreenChange
        }, glam(Fade, _extends({}, commonProps, {
          component: Blanket,
          "in": transitionIn
        })), glam(SlideUp, _extends({}, commonProps, {
          component: Positioner,
          "in": transitionIn,
          innerProps: {
            onClick: this.handleBackdropClick
          },
          onEntered: this.modalDidMount,
          onExited: this.modalWillUnmount
        }), glam(Dialog, commonProps, carouselComponent), glam(ScrollLock, null)));
      }
    }]);

    return Modal;
  }(React.Component);

  Modal.defaultProps = defaultProps$1;

  var _initialiseProps$1 = function _initialiseProps() {
    var _this2 = this;

    this.modalDidMount = function () {
      document.addEventListener('keyup', _this2.handleKeyUp);
      focusStore.storeFocus();
    };

    this.modalWillUnmount = function () {
      document.removeEventListener('keyup', _this2.handleKeyUp);
      focusStore.restoreFocus();
    };

    this.cacheComponents = function (comps) {
      _this2.components = defaultModalComponents(comps);
    };

    this.handleFullscreenChange = function (isFullscreen) {
      _this2.setState({
        isFullscreen: isFullscreen
      });
    };

    this.handleKeyUp = function (event) {
      var _this2$props = _this2.props,
          allowFullscreen = _this2$props.allowFullscreen,
          closeOnEsc = _this2$props.closeOnEsc;
      var isFullscreen = _this2.state.isFullscreen;
      var allowClose = event.key === 'Escape' && closeOnEsc && !isFullscreen; // toggle fullscreen

      if (allowFullscreen && event.key === 'f') {
        _this2.toggleFullscreen();
      } // close on escape when not fullscreen


      if (allowClose) _this2.handleClose(event);
    };

    this.handleBackdropClick = function (event) {
      var closeOnBackdropClick = _this2.props.closeOnBackdropClick;
      if (!event.target.classList.contains(className('view')) || !closeOnBackdropClick) return;

      _this2.handleClose(event);
    };

    this.toggleFullscreen = function () {
      _this2.setState(function (state) {
        return {
          isFullscreen: !state.isFullscreen
        };
      });
    };

    this.handleClose = function (event) {
      var onClose = _this2.props.onClose;
      var isFullscreen = _this2.state.isFullscreen; // force exit fullscreen mode on close

      if (isFullscreen) {
        _this2.toggleFullscreen();
      } // call the consumer's onClose func


      onClose(event);
    };

    this.getStyles = function (key, props) {
      var base = defaultModalStyles[key](props);
      base.boxSizing = 'border-box';
      var custom = _this2.props.styles[key];
      return custom ? custom(base, props) : base;
    };
  };

  // This file exists as an entry point for bundling our umd builds.
  Carousel.ModalGateway = ModalGateway;
  Carousel.Modal = Modal;
  Carousel.carouselComponents = carouselComponents;
  Carousel.modalComponents = modalComponents;

  return Carousel;

})));
