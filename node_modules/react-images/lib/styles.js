"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeStyles = mergeStyles;
exports.defaultModalStyles = exports.defaultCarouselStyles = void 0;

var _Container = require("./components/Container");

var _Navigation = require("./components/Navigation");

var _View = require("./components/View");

var _Header = require("./components/Header");

var _Footer = require("./components/Footer");

var _styled = require("./components/Modal/styled");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultCarouselStyles = {
  container: _Container.containerCSS,
  footer: _Footer.footerCSS,
  footerCaption: _Footer.footerCaptionCSS,
  footerCount: _Footer.footerCountCSS,
  header: _Header.headerCSS,
  headerClose: _Header.headerCloseCSS,
  headerFullscreen: _Header.headerFullscreenCSS,
  navigation: _Navigation.navigationCSS,
  navigationPrev: _Navigation.navigationPrevCSS,
  navigationNext: _Navigation.navigationNextCSS,
  view: _View.viewCSS
};
exports.defaultCarouselStyles = defaultCarouselStyles;
var defaultModalStyles = {
  blanket: _styled.blanketCSS,
  dialog: _styled.dialogCSS,
  positioner: _styled.positionerCSS
}; // Merge Utility
// Allows consumers to extend a base Carousel or Modal with additional styles

exports.defaultModalStyles = defaultModalStyles;

function mergeStyles(source) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // initialize with source styles
  var styles = _objectSpread({}, source); // massage in target styles


  Object.keys(target).forEach(function (key) {
    if (source[key]) {
      styles[key] = function (rsCss, props) {
        return target[key](source[key](rsCss, props), props);
      };
    } else {
      styles[key] = target[key];
    }
  });
  return styles;
}