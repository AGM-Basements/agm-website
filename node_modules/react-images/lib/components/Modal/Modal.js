"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _glam = _interopRequireDefault(require("glam"));

var _reactFullScreen = _interopRequireDefault(require("react-full-screen"));

var _reactScrolllock = _interopRequireDefault(require("react-scrolllock"));

var _a11yFocusStore = _interopRequireDefault(require("a11y-focus-store"));

var _defaultComponents = require("../defaultComponents");

var _Animation = require("./Animation");

var _styles = require("../../styles");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var defaultProps = {
  allowFullscreen: !(0, _utils.isTouch)(),
  closeOnBackdropClick: true,
  closeOnEsc: true,
  styles: {}
};

var Modal =
/*#__PURE__*/
function (_Component) {
  _inherits(Modal, _Component);

  // TODO
  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

    _initialiseProps.call(_assertThisInitialized(_this));

    _this.cacheComponents(props.components);

    _this.state = {
      isFullscreen: false
    };
    return _this;
  }

  _createClass(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.components !== this.props.components) {
        this.cacheComponents(prevProps.components);
      }
    } // emulate `componentDidMount` & `componentWillUnmount`
    // called on complete of enter & exit transitions respectively

  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var isFullscreen = this.state.isFullscreen;
      return {
        getStyles: this.getStyles,
        isFullscreen: isFullscreen,
        modalProps: this.props
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$components = this.components,
          Blanket = _this$components.Blanket,
          Positioner = _this$components.Positioner,
          Dialog = _this$components.Dialog;
      var _this$props = this.props,
          allowFullscreen = _this$props.allowFullscreen,
          children = _this$props.children;
      var isFullscreen = this.state.isFullscreen;
      var commonProps = this.commonProps = this.getCommonProps(); // $FlowFixMe

      var transitionIn = this.props["in"]; // forward props to modal for use in internal components

      var modalProps = {
        allowFullscreen: allowFullscreen,
        isFullscreen: isFullscreen,
        onClose: this.handleClose,
        toggleFullscreen: this.toggleFullscreen
      }; // augment user carousel with modal props
      // $FlowFixMe

      var carouselComponent = (0, _react.cloneElement)(children, {
        isModal: true,
        modalProps: modalProps
      });
      return (0, _glam["default"])(_reactFullScreen["default"], {
        enabled: isFullscreen,
        onChange: this.handleFullscreenChange
      }, (0, _glam["default"])(_Animation.Fade, _extends({}, commonProps, {
        component: Blanket,
        "in": transitionIn
      })), (0, _glam["default"])(_Animation.SlideUp, _extends({}, commonProps, {
        component: Positioner,
        "in": transitionIn,
        innerProps: {
          onClick: this.handleBackdropClick
        },
        onEntered: this.modalDidMount,
        onExited: this.modalWillUnmount
      }), (0, _glam["default"])(Dialog, commonProps, carouselComponent), (0, _glam["default"])(_reactScrolllock["default"], null)));
    }
  }]);

  return Modal;
}(_react.Component);

Modal.defaultProps = defaultProps;

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.modalDidMount = function () {
    document.addEventListener('keyup', _this2.handleKeyUp);

    _a11yFocusStore["default"].storeFocus();
  };

  this.modalWillUnmount = function () {
    document.removeEventListener('keyup', _this2.handleKeyUp);

    _a11yFocusStore["default"].restoreFocus();
  };

  this.cacheComponents = function (comps) {
    _this2.components = (0, _defaultComponents.defaultModalComponents)(comps);
  };

  this.handleFullscreenChange = function (isFullscreen) {
    _this2.setState({
      isFullscreen: isFullscreen
    });
  };

  this.handleKeyUp = function (event) {
    var _this2$props = _this2.props,
        allowFullscreen = _this2$props.allowFullscreen,
        closeOnEsc = _this2$props.closeOnEsc;
    var isFullscreen = _this2.state.isFullscreen;
    var allowClose = event.key === 'Escape' && closeOnEsc && !isFullscreen; // toggle fullscreen

    if (allowFullscreen && event.key === 'f') {
      _this2.toggleFullscreen();
    } // close on escape when not fullscreen


    if (allowClose) _this2.handleClose(event);
  };

  this.handleBackdropClick = function (event) {
    var closeOnBackdropClick = _this2.props.closeOnBackdropClick;
    if (!event.target.classList.contains((0, _utils.className)('view')) || !closeOnBackdropClick) return;

    _this2.handleClose(event);
  };

  this.toggleFullscreen = function () {
    _this2.setState(function (state) {
      return {
        isFullscreen: !state.isFullscreen
      };
    });
  };

  this.handleClose = function (event) {
    var onClose = _this2.props.onClose;
    var isFullscreen = _this2.state.isFullscreen; // force exit fullscreen mode on close

    if (isFullscreen) {
      _this2.toggleFullscreen();
    } // call the consumer's onClose func


    onClose(event);
  };

  this.getStyles = function (key, props) {
    var base = _styles.defaultModalStyles[key](props);

    base.boxSizing = 'border-box';
    var custom = _this2.props.styles[key];
    return custom ? custom(base, props) : base;
  };
};

var _default = Modal;
exports["default"] = _default;