"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dialog = exports.dialogCSS = exports.Positioner = exports.positionerCSS = exports.Blanket = exports.blanketCSS = void 0;

var _react = _interopRequireDefault(require("react"));

var _glam = _interopRequireDefault(require("glam"));

var _primitives = require("../../primitives");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var blanketCSS = function blanketCSS(_ref) {
  var isFullscreen = _ref.isFullscreen;
  return {
    backgroundColor: isFullscreen ? 'black' : 'rgba(0, 0, 0, 0.8)',
    bottom: 0,
    left: 0,
    position: 'fixed',
    right: 0,
    top: 0,
    zIndex: 1
  };
};

exports.blanketCSS = blanketCSS;

var Blanket = function Blanket(props) {
  var getStyles = props.getStyles,
      innerProps = props.innerProps,
      isFullscreen = props.isFullscreen;
  return (0, _glam["default"])(_primitives.Div, _extends({
    css: getStyles('blanket', props),
    className: (0, _utils.className)('blanket', {
      isFullscreen: isFullscreen
    })
  }, innerProps));
}; // ==============================
// Positioner
// ==============================


exports.Blanket = Blanket;

var positionerCSS = function positionerCSS() {
  return {
    alignItems: 'center',
    bottom: 0,
    display: 'flex ',
    justifyContent: 'center',
    left: 0,
    position: 'fixed',
    right: 0,
    top: 0,
    zIndex: 1
  };
};

exports.positionerCSS = positionerCSS;

var Positioner = function Positioner(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps,
      isFullscreen = props.isFullscreen;
  return (0, _glam["default"])(_primitives.Div, _extends({
    css: getStyles('positioner', props),
    className: (0, _utils.className)('positioner', {
      isFullscreen: isFullscreen
    })
  }, innerProps), children);
}; // ==============================
// Dialog
// ==============================


exports.Positioner = Positioner;

var dialogCSS = function dialogCSS() {
  return {
    width: '100%'
  };
};

exports.dialogCSS = dialogCSS;

var Dialog = function Dialog(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps,
      isFullscreen = props.isFullscreen;
  return (0, _glam["default"])(_primitives.Div, _extends({
    css: getStyles('dialog', props),
    className: (0, _utils.className)('dialog', {
      isFullscreen: isFullscreen
    })
  }, innerProps), children);
};

exports.Dialog = Dialog;