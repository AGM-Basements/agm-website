"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _glam = _interopRequireDefault(require("glam"));

var _rafSchd = _interopRequireDefault(require("raf-schd"));

var _reactViewPager = require("react-view-pager");

var _defaultComponents = require("./defaultComponents");

var _styles = require("../styles");

var _utils = require("../utils");

var _formatters = _interopRequireDefault(require("../formatters"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var viewPagerStyles = {
  flex: '1 1 auto',
  position: 'relative'
};
var frameStyles = {
  outline: 0
};
var defaultProps = {
  currentIndex: 0,
  formatters: _formatters["default"],
  hideControlsWhenIdle: 3000,
  styles: {},
  trackProps: {
    instant: !(0, _utils.isTouch)(),
    swipe: 'touch'
  }
};

var Carousel =
/*#__PURE__*/
function (_Component) {
  _inherits(Carousel, _Component);

  // TODO
  function Carousel(props) {
    var _this;

    _classCallCheck(this, Carousel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Carousel).call(this, props));

    _initialiseProps.call(_assertThisInitialized(_this));

    _this.cacheComponents(props.components);

    _this.state = {
      currentIndex: props.currentIndex,
      interactionIsIdle: (0, _utils.isTouch)()
    };
    return _this;
  }

  _createClass(Carousel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          hideControlsWhenIdle = _this$props.hideControlsWhenIdle,
          modalProps = _this$props.modalProps;
      var isModal = Boolean(modalProps);
      this.mounted = true;

      if (hideControlsWhenIdle && this.container) {
        this.container.addEventListener('mousedown', this.handleMouseActivity);
        this.container.addEventListener('mousemove', this.handleMouseActivity);
        this.container.addEventListener('touchmove', this.handleMouseActivity);
      }

      if (isModal) {
        this.focusViewFrame();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.components !== this.props.components) {
        this.cacheComponents(prevProps.components);
      }

      if (this.props.currentIndex !== prevProps.currentIndex) {
        this.setState({
          currentIndex: prevProps.currentIndex
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;

      if (this.props.hideControlsWhenIdle && this.container) {
        this.container.removeEventListener('mousedown', this.handleMouseActivity);
        this.container.removeEventListener('mousemove', this.handleMouseActivity);
        this.container.removeEventListener('touchmove', this.handleMouseActivity);
        this.handleMouseActivity.cancel();
      }
    }
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var _this$props2 = this.props,
          frameProps = _this$props2.frameProps,
          trackProps = _this$props2.trackProps,
          modalProps = _this$props2.modalProps,
          views = _this$props2.views;
      var isModal = Boolean(modalProps);
      var isFullscreen = Boolean(modalProps && modalProps.isFullscreen);
      var _this$state = this.state,
          currentIndex = _this$state.currentIndex,
          interactionIsIdle = _this$state.interactionIsIdle;
      var currentView = this.getViewData();
      return {
        carouselProps: this.props,
        currentIndex: currentIndex,
        currentView: currentView,
        formatters: this.props.formatters,
        frameProps: frameProps,
        getStyles: this.getStyles,
        isFullscreen: isFullscreen,
        isModal: isModal,
        modalProps: modalProps,
        interactionIsIdle: interactionIsIdle,
        trackProps: trackProps,
        views: views
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$components = this.components,
          Container = _this$components.Container,
          View = _this$components.View;
      var currentIndex = this.state.currentIndex;
      var _this$props3 = this.props,
          frameProps = _this$props3.frameProps,
          views = _this$props3.views;
      var commonProps = this.commonProps = this.getCommonProps();
      return (0, _glam["default"])(Container, _extends({}, commonProps, {
        innerProps: {
          innerRef: this.getContainer
        }
      }), this.renderHeader(), (0, _glam["default"])(_reactViewPager.ViewPager, {
        tag: "main",
        style: viewPagerStyles,
        className: (0, _utils.className)('pager')
      }, (0, _glam["default"])(_reactViewPager.Frame, _extends({}, frameProps, {
        ref: this.getFrame,
        className: (0, _utils.className)('frame'),
        style: frameStyles
      }), (0, _glam["default"])(_reactViewPager.Track, _extends({}, this.getTrackProps(this.props), {
        style: {
          display: 'flex',
          alignItems: 'center'
        },
        currentView: currentIndex,
        className: (0, _utils.className)('track'),
        onViewChange: this.handleViewChange,
        ref: this.getTrack
      }), views && views.map(function (data, index) {
        return (0, _glam["default"])(_reactViewPager.View, {
          className: (0, _utils.className)('view-wrapper'),
          key: index
        }, (0, _glam["default"])(View, _extends({}, commonProps, {
          data: data,
          index: index
        })));
      }))), this.renderNavigation()), this.renderFooter());
    }
  }]);

  return Carousel;
}(_react.Component);

Carousel.defaultProps = defaultProps;

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.mounted = false;

  this.cacheComponents = function (comps) {
    _this2.components = (0, _defaultComponents.defaultCarouselComponents)(comps);
  };

  this.getContainer = function (ref) {
    _this2.container = ref;
  };

  this.getFooter = function (ref) {
    _this2.footer = ref;
  };

  this.getFrame = function (ref) {
    _this2.frame = (0, _reactDom.findDOMNode)(ref);
  };

  this.getHeader = function (ref) {
    _this2.header = ref;
  };

  this.getTrack = function (ref) {
    _this2.track = ref;
  };

  this.hasPreviousView = function () {
    var trackProps = _this2.props.trackProps;
    var currentIndex = _this2.state.currentIndex;
    return trackProps.infinite || currentIndex !== 0;
  };

  this.hasNextView = function () {
    var _this2$props = _this2.props,
        trackProps = _this2$props.trackProps,
        views = _this2$props.views;
    var currentIndex = _this2.state.currentIndex;
    return trackProps.infinite || currentIndex !== views.length - 1;
  };

  this.getStyles = function (key, props) {
    var base = _styles.defaultCarouselStyles[key](props);

    base.boxSizing = 'border-box';
    var custom = _this2.props.styles[key];
    return custom ? custom(base, props) : base;
  };

  this.getTrackProps = function (props) {
    return _objectSpread({}, defaultProps.trackProps, {}, props.trackProps);
  };

  this.getFormatters = function () {
    return _objectSpread({}, defaultProps.formatters, {}, _this2.props.formatters);
  };

  this.getViewData = function () {
    var views = _this2.props.views;
    var currentIndex = _this2.state.currentIndex;
    return views[currentIndex];
  };

  this.focusViewFrame = function () {
    if (_this2.frame && document.activeElement !== _this2.frame) {
      _this2.frame.focus();
    }
  };

  this.prev = function () {
    _this2.track.prev();

    _this2.focusViewFrame();
  };

  this.next = function () {
    _this2.track.next();

    _this2.focusViewFrame();
  };

  this.handleMouseActivity = (0, _rafSchd["default"])(function () {
    clearTimeout(_this2.timer);

    if (_this2.state.interactionIsIdle) {
      _this2.setState({
        interactionIsIdle: false
      });
    }

    _this2.timer = setTimeout(function () {
      if (_this2.mounted) {
        _this2.setState({
          interactionIsIdle: true
        });
      }
    }, _this2.props.hideControlsWhenIdle);
  });

  this.handleViewChange = function (indicies) {
    var trackProps = _this2.props.trackProps; // simplify by enforcing number

    var currentIndex = indicies[0];

    _this2.setState({
      currentIndex: currentIndex
    }); // call the consumer's onViewChange fn


    if (trackProps && trackProps.onViewChange) {
      trackProps.onViewChange(currentIndex);
    }
  };

  this.renderNavigation = function () {
    var _this2$getFormatters = _this2.getFormatters(),
        getNextLabel = _this2$getFormatters.getNextLabel,
        getPrevLabel = _this2$getFormatters.getPrevLabel,
        getNextTitle = _this2$getFormatters.getNextTitle,
        getPrevTitle = _this2$getFormatters.getPrevTitle;

    var _this2$components = _this2.components,
        Navigation = _this2$components.Navigation,
        NavigationPrev = _this2$components.NavigationPrev,
        NavigationNext = _this2$components.NavigationNext;
    var commonProps = _this2.commonProps;

    var showPrev = _this2.hasPreviousView();

    var showNext = _this2.hasNextView();

    var showNav = (showPrev || showNext) && Navigation;
    return showNav ? (0, _glam["default"])(Navigation, commonProps, showPrev && (0, _glam["default"])(NavigationPrev, _extends({}, commonProps, {
      align: "left",
      innerProps: {
        'aria-label': getPrevLabel(commonProps),
        onClick: _this2.prev,
        title: getPrevTitle(commonProps)
      }
    })), showNext && (0, _glam["default"])(NavigationNext, _extends({}, commonProps, {
      align: "right",
      innerProps: {
        'aria-label': getNextLabel(commonProps),
        onClick: _this2.next,
        title: getNextTitle(commonProps)
      }
    }))) : null;
  };

  this.renderFooter = function () {
    var _this2$components2 = _this2.components,
        Footer = _this2$components2.Footer,
        FooterCaption = _this2$components2.FooterCaption,
        FooterCount = _this2$components2.FooterCount;
    var commonProps = _this2.commonProps;
    return Footer ? (0, _glam["default"])(Footer, _extends({}, commonProps, {
      components: {
        Caption: FooterCaption,
        Count: FooterCount
      },
      innerProps: {
        innerRef: _this2.getFooter
      }
    })) : null;
  };

  this.renderHeader = function () {
    var _this2$components3 = _this2.components,
        Header = _this2$components3.Header,
        HeaderClose = _this2$components3.HeaderClose,
        HeaderFullscreen = _this2$components3.HeaderFullscreen;

    var _this2$getFormatters2 = _this2.getFormatters(),
        getCloseLabel = _this2$getFormatters2.getCloseLabel,
        getFullscreenLabel = _this2$getFormatters2.getFullscreenLabel;

    var commonProps = _this2.commonProps;
    return Header ? (0, _glam["default"])(Header, _extends({}, commonProps, {
      getCloseLabel: getCloseLabel,
      getFullscreenLabel: getFullscreenLabel,
      components: {
        CloseButton: HeaderClose,
        FullscreenButton: HeaderFullscreen
      },
      data: _this2.getViewData(),
      innerProps: {
        innerRef: _this2.getHeader
      }
    })) : null;
  };
};

var _default = Carousel;
exports["default"] = _default;