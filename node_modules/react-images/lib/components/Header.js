"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HeaderClose = exports.headerCloseCSS = exports.HeaderFullscreen = exports.headerFullscreenCSS = exports.headerButtonCSS = exports.headerCSS = void 0;

var _react = _interopRequireDefault(require("react"));

var _glam = _interopRequireDefault(require("glam"));

var _primitives = require("../primitives");

var _utils = require("../utils");

var _svg = require("./svg");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var headerCSS = function headerCSS(_ref) {
  var interactionIsIdle = _ref.interactionIsIdle;
  return {
    alignItems: 'center',
    display: 'flex ',
    flex: '0 0 auto',
    justifyContent: 'space-between',
    opacity: interactionIsIdle ? 0 : 1,
    padding: 10,
    paddingBottom: 20,
    position: 'absolute',
    transform: "translateY(".concat(interactionIsIdle ? -10 : 0, "px)"),
    transition: 'opacity 300ms, transform 300ms',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 1
  };
};

exports.headerCSS = headerCSS;

var Header = function Header(props) {
  var components = props.components,
      getStyles = props.getStyles,
      getCloseLabel = props.getCloseLabel,
      getFullscreenLabel = props.getFullscreenLabel,
      innerProps = props.innerProps,
      isModal = props.isModal,
      modalProps = props.modalProps;
  if (!isModal) return null;
  var allowFullscreen = modalProps.allowFullscreen,
      isFullscreen = modalProps.isFullscreen,
      onClose = modalProps.onClose,
      toggleFullscreen = modalProps.toggleFullscreen;
  var FsIcon = isFullscreen ? _svg.FullscreenExit : _svg.FullscreenEnter;
  var CloseButton = components.CloseButton,
      FullscreenButton = components.FullscreenButton;
  var state = {
    isFullscreen: isFullscreen,
    isModal: isModal
  };
  return (0, _glam["default"])(_primitives.Div, _extends({
    css: getStyles('header', props),
    className: (0, _utils.className)('header', state) // TODO glam prefixer fails on gradients
    // https://github.com/threepointone/glam/issues/35
    ,
    style: {
      background: 'linear-gradient(rgba(0,0,0,0.33), rgba(0,0,0,0))'
    }
  }, innerProps), (0, _glam["default"])("span", null), (0, _glam["default"])("span", null, allowFullscreen ? (0, _glam["default"])(FullscreenButton, {
    getStyles: getStyles,
    innerProps: {
      onClick: toggleFullscreen,
      title: getFullscreenLabel(state)
    }
  }, (0, _glam["default"])(FsIcon, {
    size: 32
  })) : null, (0, _glam["default"])(CloseButton, {
    getStyles: getStyles,
    innerProps: {
      onClick: onClose,
      title: getCloseLabel(state)
    }
  }, (0, _glam["default"])(_svg.Close, {
    size: 32
  }))));
}; // ==============================
// Header Buttons
// ==============================


var headerButtonCSS = function headerButtonCSS() {
  return {
    alignItems: 'center',
    background: 0,
    border: 0,
    color: 'rgba(255, 255, 255, 0.75)',
    cursor: 'pointer',
    display: 'inline-flex ',
    height: 44,
    justifyContent: 'center',
    outline: 0,
    padding: 0,
    position: 'relative',
    width: 44,
    '&:hover': {
      color: 'white'
    }
  };
};

exports.headerButtonCSS = headerButtonCSS;
var headerFullscreenCSS = headerButtonCSS;
exports.headerFullscreenCSS = headerFullscreenCSS;

var HeaderFullscreen = function HeaderFullscreen(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps;
  return (0, _glam["default"])(_primitives.Button, _extends({
    css: getStyles('headerFullscreen', props),
    className: (0, _utils.className)(['header_button', 'header_button--fullscreen']),
    type: "button"
  }, innerProps), children);
};

exports.HeaderFullscreen = HeaderFullscreen;
var headerCloseCSS = headerButtonCSS;
exports.headerCloseCSS = headerCloseCSS;

var HeaderClose = function HeaderClose(props) {
  var children = props.children,
      getStyles = props.getStyles,
      innerProps = props.innerProps;
  return (0, _glam["default"])(_primitives.Button, _extends({
    css: getStyles('headerClose', props),
    className: (0, _utils.className)(['header_button', 'header_button--close']),
    type: "button"
  }, innerProps), children);
};

exports.HeaderClose = HeaderClose;
var _default = Header;
exports["default"] = _default;