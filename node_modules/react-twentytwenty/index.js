'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEGREES_IN_RADIAN = 180 / Math.PI;

var TwentyTwenty = function (_Component) {
  _inherits(TwentyTwenty, _Component);

  function TwentyTwenty(props) {
    _classCallCheck(this, TwentyTwenty);

    // initialPosition was between 0 and 100, defaultPosition is between 0 and 1
    var _this = _possibleConstructorReturn(this, (TwentyTwenty.__proto__ || Object.getPrototypeOf(TwentyTwenty)).call(this, props));

    var _props$initialPositio = props.initialPosition,
        initialPosition = _props$initialPositio === undefined ? 50 : _props$initialPositio,
        _props$defaultPositio = props.defaultPosition,
        defaultPosition = _props$defaultPositio === undefined ? initialPosition / 100 : _props$defaultPositio;

    _this.state = {
      startX: NaN,
      startY: NaN,
      isDragging: false,
      position: defaultPosition
    };

    _this.beginDrag = _this.beginDrag.bind(_this);
    _this.endDrag = _this.endDrag.bind(_this);
    _this.onDragMove = _this.onDragMove.bind(_this);

    // TODO: Replace with React.createRef() when React 16.3 is more widely adopted
    _this.container = function (element) {
      _this.container.current = element;
    };
    _this.container.current = null;
    return _this;
  }

  _createClass(TwentyTwenty, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.endDrag();
    }
  }, {
    key: 'onDragMove',
    value: function onDragMove(e) {
      var _this2 = this;

      if (!this.props.isDraggingEnabled) return;

      var isDragging = this.state.isDragging;

      var isTouch = 'touches' in e;

      var _ref = isTouch ? e.touches[0] : e,
          pageX = _ref.pageX,
          pageY = _ref.pageY;

      if (!isDragging && isTouch) {
        var _props = this.props,
            maxAngleToBeginInteraction = _props.maxAngleToBeginInteraction,
            minDistanceToBeginInteraction = _props.minDistanceToBeginInteraction;
        var _state = this.state,
            startX = _state.startX,
            startY = _state.startY;


        var dx = startX - pageX;
        var dy = startY - pageY;

        var angle = Math.atan(dy / dx) * DEGREES_IN_RADIAN;
        var distance = Math.sqrt(dx * dx + dy * dy);
        isDragging = distance >= minDistanceToBeginInteraction;

        if (isDragging && Math.abs(angle) > maxAngleToBeginInteraction) {
          // They're trying to scroll vertically
          this.endDrag();
          return;
        } else if (!isDragging) {
          return;
        }
      }

      if (isTouch) e.preventDefault();

      var _container$current$ge = this.container.current.getBoundingClientRect(),
          left = _container$current$ge.left,
          width = _container$current$ge.width;

      var position = (pageX - left) / width;
      position = Math.max(Math.min(position, 1), 0);

      if (this.props.position != null) {
        this.setState(function (state) {
          return !state.isDragging !== isDragging ? { isDragging: isDragging } : null;
        }, function () {
          _this2.props.onChange(position);
        });
      } else {
        this.setState({ position: position, isDragging: isDragging });
      }
    }
  }, {
    key: 'beginDrag',
    value: function beginDrag(e) {
      if (e != null && !('touches' in e)) e.preventDefault();
      if (!this.props.isDraggingEnabled) return;

      var _ref2 = 'touches' in e ? e.touches[0] : e,
          pageX = _ref2.pageX,
          pageY = _ref2.pageY;

      this.setState({ startX: pageX, startY: pageY });

      document.addEventListener('mousemove', this.onDragMove);
      document.addEventListener('mouseup', this.endDrag);
      document.addEventListener('touchmove', this.onDragMove);
      document.addEventListener('touchend', this.endDrag);
    }
  }, {
    key: 'endDrag',
    value: function endDrag() {
      document.removeEventListener('mousemove', this.onDragMove);
      document.removeEventListener('mouseup', this.endDrag);
      document.removeEventListener('touchmove', this.onDragMove);
      document.removeEventListener('touchend', this.endDrag);

      this.setState({ isDragging: false, startY: NaN, endY: NaN });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props$position = this.props.position,
          position = _props$position === undefined ? this.state.position : _props$position;
      var _props2 = this.props,
          _props2$children = _props2.children,
          children = _props2$children === undefined ? [] : _props2$children,
          _props2$left = _props2.left,
          left = _props2$left === undefined ? children[0] : _props2$left,
          _props2$right = _props2.right,
          right = _props2$right === undefined ? children[1] : _props2$right,
          _props2$slider = _props2.slider,
          slider = _props2$slider === undefined ? children[2] : _props2$slider,
          verticalAlign = _props2.verticalAlign,
          leftHorizontalAlign = _props2.leftHorizontalAlign,
          rightHorizontalAlign = _props2.rightHorizontalAlign;


      return _react2.default.createElement(
        'div',
        {
          ref: this.container,
          style: { position: 'relative', overflow: 'hidden', whiteSpace: 'nowrap' },
          onMouseDown: this.beginDrag,
          onTouchStart: this.beginDrag
        },
        _react2.default.createElement(
          'div',
          {
            style: {
              position: 'absolute',
              left: position * 100 + '%',
              height: '100%',
              width: 0,
              zIndex: 1
            }
          },
          slider
        ),
        _react2.default.createElement(
          'div',
          {
            style: {
              display: 'inline-block',
              width: '100%',
              position: 'relative',
              verticalAlign: verticalAlign,
              left: (position - 1) * 100 + '%',
              overflow: 'hidden'
            }
          },
          _react2.default.createElement(
            'div',
            {
              style: {
                position: 'relative',
                right: (position - 1) * 100 + '%',
                textAlign: leftHorizontalAlign
              }
            },
            left
          )
        ),
        _react2.default.createElement(
          'div',
          {
            style: {
              display: 'inline-block',
              width: '100%',
              position: 'relative',
              verticalAlign: verticalAlign,
              left: (position - 1) * 100 + '%',
              overflow: 'hidden'
            }
          },
          _react2.default.createElement(
            'div',
            {
              style: {
                position: 'relative',
                right: position * 100 + '%',
                textAlign: rightHorizontalAlign
              }
            },
            right
          )
        )
      );
    }
  }]);

  return TwentyTwenty;
}(_react.Component);

exports.default = TwentyTwenty;


TwentyTwenty.propTypes = {
  left: _propTypes2.default.element.isRequired,
  right: _propTypes2.default.element.isRequired,
  splitter: _propTypes2.default.element,
  verticalAlign: _propTypes2.default.string,
  leftHorizontalAlign: _propTypes2.default.string,
  rightHorizontalAlign: _propTypes2.default.string,
  minDistanceToBeginInteraction: _propTypes2.default.number,
  maxAngleToBeginInteraction: _propTypes2.default.number,
  defaultPosition: _propTypes2.default.number,
  position: _propTypes2.default.number,
  isDraggingEnabled: _propTypes2.default.bool,
  onChange: _propTypes2.default.func
};

TwentyTwenty.defaultProps = {
  verticalAlign: 'middle',
  leftHorizontalAlign: 'center',
  rightHorizontalAlign: 'center',
  minDistanceToBeginInteraction: 15,
  maxAngleToBeginInteraction: 30,
  isDraggingEnabled: true,
  onChange: function onChange() {}
};
