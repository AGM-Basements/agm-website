{"ast":null,"code":"var _jsxFileName = \"/Users/mathewmozaffari/Desktop/Current Clients/AGM Basements/src/speer/agm_basements/src/Containers/Braintree.js\";\nimport React from \"react\";\nimport braintree from 'braintree-web';\nimport CheckoutTick from '../Assets/Images/checout_tick.png';\n\nclass BraintreeComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clientToken: ''\n    };\n\n    this.getTodayDate = () => {\n      var today = new Date(),\n          dd = today.getDate(),\n          mm = today.getMonth() + 1,\n          yyyy = today.getFullYear();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n\n      var today = mm + '/' + dd + '/' + yyyy;\n      return today;\n    };\n\n    this.sendInvoice = async () => {\n      const _this$props = this.props,\n            name = _this$props.name,\n            email = _this$props.email,\n            address = _this$props.address,\n            phone = _this$props.phone,\n            planname = _this$props.planname,\n            amount = _this$props.amount;\n      var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (!re.test(email)) {\n        alert('You have entered an invalid email address!');\n        return false;\n      }\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"name\": name,\n          \"email\": email,\n          \"address\": address,\n          \"phone\": phone,\n          \"planname\": planname,\n          \"amount\": amount\n        })\n      };\n      const response = await fetch(`https://braintreeagm.afuntestenvironment.dev/api/sendEmail`, requestOptions);\n\n      try {\n        const res = await response.json(); // If returned as JSON string\n\n        if (res.success === false) {\n          console.log(\"res\", res);\n        } else {\n          console.log(\"res\", res);\n        }\n      } catch (e) {\n        console.log(\"e\", e);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    var me = this;\n\n    try {\n      // Get a client token for authorization from your server\n      const response = await fetch(\"https://braintreeagm.afuntestenvironment.dev/api/braintree/getToken\");\n      const res = await response.json(); // If returned as JSON string\n\n      if (res.clientToken) {\n        braintree.client.create({\n          authorization: res.clientToken\n        }, function (err, clientInstance) {\n          if (err) {\n            console.error(err);\n            return;\n          }\n\n          me.createHostedFields(clientInstance);\n        });\n        this.setState({\n          clientToken: res.clientToken\n        });\n      } else {\n        alert('Something went wrong. Please try again after some time. > ' + res.name);\n      }\n    } catch (e) {\n      alert('Something went wrong. Please try again after some time.');\n    }\n  }\n\n  createHostedFields(clientInstance) {\n    braintree.hostedFields.create({\n      client: clientInstance,\n      styles: {\n        'input': {\n          'font-size': '1.5rem',\n          'font-family': 'courier, monospace',\n          'font-weight': 'lighter',\n          'color': '#ccc'\n        },\n        ':focus': {\n          'color': 'black'\n        },\n        '.valid': {\n          'color': '#8bdda8'\n        },\n        '.invalid': {\n          'color': '#ff0000'\n        }\n      },\n      fields: {\n        number: {\n          selector: '#card-number',\n          placeholder: '4111 1111 1111 1111'\n        },\n        expirationDate: {\n          selector: '#expiration-date',\n          placeholder: 'MM/YYYY'\n        }\n      }\n    }, (err, hostedFieldsInstance) => {\n      this.instance = hostedFieldsInstance;\n      hostedFieldsInstance.on('cardTypeChange', function (event) {\n        // Change card bg depending on card type\n        document.getElementById('card-image').className = '';\n\n        if (event.cards.length === 1) {\n          document.getElementById('card-image').className = event.cards[0].type;\n        }\n      });\n    });\n  }\n\n  buy() {\n    const _this$props2 = this.props,\n          name = _this$props2.name,\n          email = _this$props2.email,\n          address = _this$props2.address,\n          phone = _this$props2.phone;\n\n    if (name === '' || address === '' || phone === '') {\n      if (name === '') alert('Name field cannot be blank');else if (email === '') alert('Email address field cannot be blank');else if (address === '') alert('Address field cannot be blank');else if (phone === '') alert('Phone field cannot be blank');\n      return false;\n    } // Send the nonce to your server\n\n\n    this.instance.tokenize(async (err, payload) => {\n      if (err) {\n        alert(err.message);\n        return;\n      } // This is where you would submit payload.nonce to your server\n\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"paymentMethodNonce\": payload.nonce,\n          \"amount\": this.props.amount\n        })\n      };\n\n      try {\n        const response = await fetch(`https://braintreeagm.afuntestenvironment.dev/api/braintree/purchase`, requestOptions);\n        const res = await response.json(); // If returned as JSON string\n\n        if (res.success !== true) {\n          alert('Something went wrong >' + res.message);\n        } else {\n          this.sendInvoice();\n          this.props.paymentSucceed(res.transaction);\n        }\n      } catch (e) {\n        alert('Something went wrong. Please try again later.');\n      }\n    });\n  }\n\n  render() {\n    if (!this.state.clientToken) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Loading...\"));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-lg-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"card-styles\",\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"card-title card-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Credit Card Information:\"), React.createElement(\"div\", {\n        className: \"card-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Date Recieved:\"), React.createElement(\"div\", {\n        className: \"card-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"hosted-field\",\n        defaultValue: this.getTodayDate(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Payment Method:\"), React.createElement(\"div\", {\n        className: 'rel',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"card-number\",\n        className: \"hosted-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"card-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Expiration Date:\"), React.createElement(\"div\", {\n        id: \"expiration-date\",\n        className: \"hosted-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Cheque/Ref. No.\"), React.createElement(\"div\", {\n        className: \"card-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"0102312434\"), React.createElement(\"div\", {\n        className: \"clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-lg-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-3 action-button checkout-btn\",\n        onClick: this.buy.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: CheckoutTick,\n        alt: \"proceed to checkout\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), \"Submit\")), React.createElement(\"div\", {\n        className: \"col-lg-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\n\nexport default BraintreeComponent;","map":{"version":3,"sources":["/Users/mathewmozaffari/Desktop/Current Clients/AGM Basements/src/speer/agm_basements/src/Containers/Braintree.js"],"names":["React","braintree","CheckoutTick","BraintreeComponent","Component","state","clientToken","getTodayDate","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","sendInvoice","props","name","email","address","phone","planname","amount","re","test","alert","requestOptions","method","headers","body","JSON","stringify","response","fetch","res","json","success","console","log","e","componentDidMount","me","client","create","authorization","err","clientInstance","error","createHostedFields","setState","hostedFields","styles","fields","number","selector","placeholder","expirationDate","hostedFieldsInstance","instance","on","event","document","getElementById","className","cards","length","type","buy","tokenize","payload","message","nonce","paymentSucceed","transaction","render","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport braintree from 'braintree-web';\n\nimport CheckoutTick from '../Assets/Images/checout_tick.png';\n\nclass BraintreeComponent extends React.Component {\n    instance;\n\n    state = {\n        clientToken: ''\n    };\n\n    async componentDidMount() {\n        var me = this;\n        try {\n            // Get a client token for authorization from your server\n            const response = await fetch(\"https://braintreeagm.afuntestenvironment.dev/api/braintree/getToken\");\n            const res = await response.json(); // If returned as JSON string\n\n            if(res.clientToken){\n                braintree.client.create({\n                    authorization: res.clientToken\n                }, function(err, clientInstance) {\n                    if (err) {\n                        console.error(err);\n                        return;\n                    }\n                    me.createHostedFields(clientInstance);\n                });\n                this.setState({\n                    clientToken: res.clientToken\n                });\n            } else {\n                alert('Something went wrong. Please try again after some time. > '+res.name);\n            }\n        } catch(e) {\n            alert('Something went wrong. Please try again after some time.');\n        }\n    }\n\n    createHostedFields(clientInstance) {\n        braintree.hostedFields.create({\n            client: clientInstance,\n            styles: {\n                'input': {\n                    'font-size': '1.5rem',\n                    'font-family': 'courier, monospace',\n                    'font-weight': 'lighter',\n                    'color': '#ccc'\n                },\n                ':focus': {\n                    'color': 'black'\n                },\n                '.valid': {\n                    'color': '#8bdda8'\n                },\n                '.invalid': {\n                    'color': '#ff0000'\n                }\n            },\n            fields: {\n                number: {\n                    selector: '#card-number',\n                    placeholder: '4111 1111 1111 1111'\n                },\n                expirationDate: {\n                    selector: '#expiration-date',\n                    placeholder: 'MM/YYYY'\n                }\n            }\n        }, (err, hostedFieldsInstance) => {\n            this.instance = hostedFieldsInstance;\n            hostedFieldsInstance.on('cardTypeChange', function (event) {\n                // Change card bg depending on card type\n                document.getElementById('card-image').className = '';\n                if (event.cards.length === 1) {\n                    document.getElementById('card-image').className = event.cards[0].type;\n                }\n            })\n        });\n    }\n\n    getTodayDate = () => {\n        var today = new Date(),\n            dd = today.getDate(),\n            mm = today.getMonth()+1,\n            yyyy = today.getFullYear();\n        if(dd<10) {\n            dd='0'+dd;\n        } \n\n        if(mm<10) {\n            mm='0'+mm;\n        } \n        var today = mm+'/'+dd+'/'+yyyy;\n        return today;\n    }\n\n    sendInvoice = async () => {\n        const {name, email, address, phone, planname, amount} = this.props;\n\n        var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if(!re.test(email)) {\n            alert('You have entered an invalid email address!');\n            return false;\n        }\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify({\n                \"name\": name,\n                \"email\": email,\n                \"address\": address,\n                \"phone\": phone,\n                \"planname\": planname,\n                \"amount\": amount\n            })\n        };\n        const response = await fetch(`https://braintreeagm.afuntestenvironment.dev/api/sendEmail`, requestOptions);\n        try {\n            const res = await response.json(); // If returned as JSON string\n            if(res.success === false){\n                console.log(\"res\", res);\n            } else {\n                console.log(\"res\", res);\n            }\n        } catch(e) {\n            console.log(\"e\", e);\n        }\n    }\n\n    buy() {\n        const {name, email, address, phone} = this.props;\n        if(name === '' || address === '' || phone === ''){\n            if(name === '') alert('Name field cannot be blank');\n            else if(email === '') alert('Email address field cannot be blank');\n            else if(address === '') alert('Address field cannot be blank');\n            else if(phone === '') alert('Phone field cannot be blank');\n            return false;\n        }\n\n        // Send the nonce to your server\n        this.instance.tokenize(async (err, payload) => {\n            if (err) {\n                alert(err.message);\n                return;\n            }\n    \n            // This is where you would submit payload.nonce to your server\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    \"paymentMethodNonce\": payload.nonce,\n                    \"amount\": this.props.amount\n                })\n            };\n\n            try {\n                const response = await fetch(`https://braintreeagm.afuntestenvironment.dev/api/braintree/purchase`, requestOptions);\n                const res = await response.json(); // If returned as JSON string\n                if(res.success !== true){\n                    alert('Something went wrong >' + res.message);\n                } else {\n                    this.sendInvoice();\n                    this.props.paymentSucceed(res.transaction);\n                }\n            } catch(e) {\n                alert('Something went wrong. Please try again later.');\n            }\n        });\n    }\n\n    render() {\n        if (!this.state.clientToken) {\n            return (\n                <div>\n                    <h1>Loading...</h1>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-3\" />\n                        <div className=\"col-lg-6\">\n                            <div id=\"card-styles\" className=\"container\">\n                                <p className=\"card-title card-data\">Credit Card Information:</p>\n                                <div className='card-label'>Date Recieved:</div>\n                                <div className='card-value'>\n                                    <input type='text' className=\"hosted-field\" defaultValue={this.getTodayDate()} />\n                                </div>\n                                <div className='clear' />\n                                <div className='card-label'>Payment Method:</div>\n                                <div className={'rel'}>\n                                    <div id=\"card-number\" className=\"hosted-field\"></div>\n                                    <div id=\"card-image\"></div>\n                                </div>\n                                <div className='clear' />\n                                <div className='card-label'>Expiration Date:</div>\n                                <div id=\"expiration-date\" className=\"hosted-field\"></div>\n                                <div className='clear' />\n                                <div className='card-label'>Cheque/Ref. No.</div>\n                                <div className='card-value'>0102312434</div>\n                                <div className='clear' />\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3\" />\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-6\" />\n                        <div className=\"col-lg-3\">\n                            <div className=\"mt-3 action-button checkout-btn\" onClick={this.buy.bind(this)}>\n                                <img src={CheckoutTick} alt='proceed to checkout' />\n                                Submit\n                            </div>\n                        </div>\n                        <div className=\"col-lg-3\" />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\nexport default BraintreeComponent;\n"]},"metadata":{},"sourceType":"module"}